package vm

import (
	"fmt"

	"github.com/adamwoolhether/monkeyLang/code"
	"github.com/adamwoolhether/monkeyLang/compiler"
	"github.com/adamwoolhether/monkeyLang/object"
)

const StackSize = 2048

// VM defines our virtual machine. It holds constants and instructions
// generated by the compiler, and has a stack which will be pre-allocated
// to have `StackSize` number of elements, and a stack pointer, which
// will increment or decremented to grow/shrink the stack.
type VM struct {
	constants    []object.Object
	instructions code.Instructions

	stack []object.Object
	sp    int // Always points to the next value. Top of stack is stack[sp-1]
}

func New(bytecode *compiler.Bytecode) *VM {
	return &VM{
		constants:    bytecode.Constants,
		instructions: bytecode.Instructions,
		stack:        make([]object.Object, StackSize),
		sp:           0,
	}
}

// StackTop returns the element at the top of the stack.
func (vm *VM) StackTop() object.Object {
	if vm.sp == 0 {
		return nil
	}

	return vm.stack[vm.sp-1]
}

// Run turns VM into a virtual machine. It contains the heartbeat,
// main loop, and fetch-decode-execute cycle.
func (vm *VM) Run() error {

	// Increment over the instruction pointer, fetching the current
	// instruction by accessing vm.instructions, turning the byte
	// into an Opcode.
	for ip := 0; ip < len(vm.instructions); ip++ {
		op := code.Opcode(vm.instructions[ip])

		switch op {
		case code.OpConstant:
			// decode
			constIndex := code.ReadUint16(vm.instructions[ip+1:]) // decode operands into bytecode.
			ip += 2

			// execute
			if err := vm.push(vm.constants[constIndex]); err != nil { // push the const onto the stack.
				return err
			}
		}
	}

	return nil
}

// push checks the stack size and adds the object to the stack
// and increments the stack pointer.
func (vm *VM) push(o object.Object) error {
	if vm.sp >= StackSize {
		return fmt.Errorf("stack overflow")
	}

	vm.stack[vm.sp] = o
	vm.sp++

	return nil
}