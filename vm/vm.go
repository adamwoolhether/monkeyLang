package vm

import (
	"fmt"

	"github.com/adamwoolhether/monkeyLang/code"
	"github.com/adamwoolhether/monkeyLang/compiler"
	"github.com/adamwoolhether/monkeyLang/object"
)

const StackSize = 2048

// VM defines our virtual machine. It holds constants and instructions
// generated by the compiler, and has a stack which will be pre-allocated
// to have `StackSize` number of elements, and a stack pointer, which
// will increment or decremented to grow/shrink the stack.
type VM struct {
	constants    []object.Object
	instructions code.Instructions

	stack []object.Object
	sp    int // Always points to the next value. Top of stack is stack[sp-1]
}

func New(bytecode *compiler.Bytecode) *VM {
	return &VM{
		constants:    bytecode.Constants,
		instructions: bytecode.Instructions,
		stack:        make([]object.Object, StackSize),
		sp:           0,
	}
}

// Run turns VM into a virtual machine. It contains the heartbeat,
// main loop, and fetch-decode-execute cycle.
func (vm *VM) Run() error {

	// Increment over the instruction pointer, fetching the current
	// instruction by accessing vm.instructions, turning the byte
	// into an Opcode.
	for ip := 0; ip < len(vm.instructions); ip++ {
		op := code.Opcode(vm.instructions[ip])

		switch op {
		case code.OpConstant:
			// decode
			constIndex := code.ReadUint16(vm.instructions[ip+1:]) // decode operands into bytecode.
			ip += 2

			// execute
			if err := vm.push(vm.constants[constIndex]); err != nil { // push the const onto the stack.
				return err
			}
		case code.OpAdd, code.OpSub, code.OpMul, code.OpDiv:
			if err := vm.executeBinaryOperation(op); err != nil {
				return err
			}
		case code.OpPop:
			vm.pop()
		}
	}

	return nil
}

// StackTop returns the element at the top of the stack.
func (vm *VM) StackTop() object.Object {
	if vm.sp == 0 {
		return nil
	}

	return vm.stack[vm.sp-1]
}

// LastPoppedStackElem allows a sanity check about
// what element should have been on stack immediately
// before being popped off.
func (vm *VM) LastPoppedStackElem() object.Object {
	return vm.stack[vm.sp]
}

// push checks the stack size and adds the object to the stack
// and increments the stack pointer.
func (vm *VM) push(o object.Object) error {
	if vm.sp >= StackSize {
		return fmt.Errorf("stack overflow")
	}

	vm.stack[vm.sp] = o
	vm.sp++

	return nil
}

// pop return the element located at the top of the stack and
// decrements vm.sp, allowing it to eventually be overwritten.
func (vm *VM) pop() object.Object {
	o := vm.stack[vm.sp-1]
	vm.sp--

	return o
}

func (vm *VM) executeBinaryOperation(op code.Opcode) error {
	right := vm.pop()
	left := vm.pop()

	leftType := left.Type()
	rightType := right.Type()

	if leftType == object.INTEGER_OBJ && rightType == object.INTEGER_OBJ {
		return vm.executeBinaryIntegerOperation(op, left, right)
	}

	return fmt.Errorf("unsupported types for binary operation: %s %s", leftType, rightType)
}

func (vm *VM) executeBinaryIntegerOperation(op code.Opcode, left, right object.Object) error {
	leftValue := left.(*object.Integer).Value
	rightValue := right.(*object.Integer).Value

	var result int64

	switch op {
	case code.OpAdd:
		result = leftValue + rightValue
	case code.OpSub:
		result = leftValue - rightValue
	case code.OpMul:
		result = leftValue * rightValue
	case code.OpDiv:
		result = leftValue / rightValue
	default:
		return fmt.Errorf("unknown integer operator: %d", op)
	}

	return vm.push(&object.Integer{Value: result})
}
